"use client";
import { animate, motion } from "framer-motion";
import React, { useEffect, useState } from "react";
import { cn } from "@/lib/utils";
import { GoCopilot } from "react-icons/go";

export function BlockCard() {
  return (
    <Card>
      <CardSkeletonContainer>
        <Skeleton />
      </CardSkeletonContainer>
      {/* <CardTitle>Damn good card</CardTitle>
      <CardDescription>
        A card that showcases a set of tools that you use to create your
        product.
      </CardDescription> */}
    </Card>
  );
}

const Skeleton = () => {
  const scale = [1, 1.1, 1];
  const transform = ["translateY(0px)", "translateY(-4px)", "translateY(0px)"];
  const sequence = [
    [
      ".circle-1",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-2",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-3",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-4",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-5",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
  ];

  useEffect(() => {
    // @ts-ignore
    animate(sequence, {
      repeat: Infinity,
      repeatDelay: 1,
    });
  }, []);
  return (
    <div className="p-8 overflow-hidden h-full relative flex items-center justify-center">
      <div className="flex flex-row flex-shrink-0 justify-center items-center gap-2">
        <Container className="h-8 w-8 circle-1">
          <TSLogo className="h-4 w-4 " />
        </Container>
        <Container className="h-12 w-12 circle-2">
          <NextLogo className="h-6 w-6 " />
        </Container>
        <Container className="circle-3">
          <ReactLogo className="h-8 w-8 dark:text-white" />
        </Container>
        <Container className="h-12 w-12 circle-4">
          <JSLogo className="h-6 w-6 rounded-md"/>
        </Container>
        <Container className="h-8 w-8 circle-5">
          <TailLogo className="h-4 w-4 " />
        </Container>
      </div>

      {/* <div className="h-40 w-px absolute top-20 m-auto z-40 bg-gradient-to-b from-transparent via-cyan-500 to-transparent animate-move">
        <div className="w-10 h-32 top-1/2 -translate-y-1/2 absolute -left-10">
          <Sparkles />
        </div>
      </div> */}
    </div>
  );
};
const Sparkles = () => {
  const randomMove = () => Math.random() * 2 - 1;
  const randomOpacity = () => Math.random();
  const random = () => Math.random();
  return (
    <div className="absolute inset-0">
      {[...Array(12)].map((_, i) => (
        <motion.span
          key={`star-${i}`}
          animate={{
            top: `calc(${random() * 100}% + ${randomMove()}px)`,
            left: `calc(${random() * 100}% + ${randomMove()}px)`,
            opacity: randomOpacity(),
            scale: [1, 1.2, 0],
          }}
          transition={{
            duration: random() * 2 + 4,
            repeat: Infinity,
            ease: "linear",
          }}
          style={{
            position: "absolute",
            top: `${random() * 100}%`,
            left: `${random() * 100}%`,
            width: `2px`,
            height: `2px`,
            borderRadius: "50%",
            zIndex: 1,
          }}
          className="inline-block bg-black dark:bg-white"
        ></motion.span>
      ))}
    </div>
  );
};

export const Card = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <div
      // className={cn(
      //   "max-w-sm w-full mx-auto p-8 rounded-xl border border-[rgba(255,255,255,0.10)] dark:bg-[rgba(40,40,40,0.70)] bg-gray-100 shadow-[2px_4px_16px_0px_rgba(248,248,248,0.06)_inset] group",
      //   className
      // )}
    >
      {children}
    </div>
  );
};

export const CardTitle = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <h3
      className={cn(
        "text-lg font-semibold text-gray-800 dark:text-white py-2",
        className
      )}
    >
      {children}
    </h3>
  );
};

export const CardDescription = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <p
      className={cn(
        "text-sm font-normal text-neutral-600 dark:text-neutral-400 max-w-sm",
        className
      )}
    >
      {children}
    </p>
  );
};

export const CardSkeletonContainer = ({
  className,
  children,
  showGradient = true,
}: {
  className?: string;
  children: React.ReactNode;
  showGradient?: boolean;
}) => {
  return (
    <div
      className={cn(
        // "h-[15rem] md:h-[20rem] rounded-xl z-40",
        className,
        // showGradient &&
        //   "bg-neutral-300 dark:bg-[rgba(40,40,40,0.70)] [mask-image:radial-gradient(50%_50%_at_50%_50%,white_0%,transparent_100%)]"
      )}
    >
      {children}
    </div>
  );
};

const Container = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <div
      className={cn(
        `h-16 w-16 rounded-full flex items-center justify-center bg-[rgba(248,248,248,0.01)]
    shadow-[0px_0px_8px_0px_rgba(248,248,248,0.25)_inset,0px_32px_24px_-16px_rgba(0,0,0,0.40)]
    `,
        className
      )}
    >
      {children}
    </div>
  );
};

export const ReactLogo = ({ className }: { className?: string }) => {
  return (
  <svg
    viewBox="0 -14 256 256"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    preserveAspectRatio="xMidYMid"
    fill="#000000"
    className={className}
  >
    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
    <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
    <g id="SVGRepo_iconCarrier"> <g>
    <path d="M210.483381,73.8236374 C207.827698,72.9095503 205.075867,72.0446761 202.24247,71.2267368 C202.708172,69.3261098 203.135596,67.4500894 203.515631,65.6059664 C209.753843,35.3248922 205.675082,10.9302478 191.747328,2.89849283 C178.392359,-4.80289661 156.551327,3.22703567 134.492936,22.4237776 C132.371761,24.2697233 130.244662,26.2241201 128.118477,28.2723861 C126.701777,26.917204 125.287358,25.6075897 123.876584,24.3549348 C100.758745,3.82852863 77.5866802,-4.82157937 63.6725966,3.23341515 C50.3303869,10.9571328 46.3792156,33.8904224 51.9945178,62.5880206 C52.5367729,65.3599011 53.1706189,68.1905639 53.8873982,71.068617 C50.6078941,71.9995641 47.4418534,72.9920277 44.4125156,74.0478303 C17.3093297,83.497195 0,98.3066828 0,113.667995 C0,129.533287 18.5815786,145.446423 46.8116526,155.095373 C49.0394553,155.856809 51.3511025,156.576778 53.7333796,157.260293 C52.9600965,160.37302 52.2875179,163.423318 51.7229345,166.398431 C46.3687351,194.597975 50.5500231,216.989464 63.8566899,224.664425 C77.6012619,232.590464 100.66852,224.443422 123.130185,204.809231 C124.905501,203.257196 126.687196,201.611293 128.472081,199.886102 C130.785552,202.113904 133.095375,204.222319 135.392897,206.199955 C157.14963,224.922338 178.637969,232.482469 191.932332,224.786092 C205.663234,216.837268 210.125675,192.78347 204.332202,163.5181 C203.88974,161.283006 203.374826,158.99961 202.796573,156.675661 C204.416503,156.196743 206.006814,155.702335 207.557482,155.188332 C236.905331,145.46465 256,129.745175 256,113.667995 C256,98.2510906 238.132466,83.3418093 210.483381,73.8236374 L210.483381,73.8236374 Z M204.118035,144.807565 C202.718197,145.270987 201.281904,145.718918 199.818271,146.153177 C196.578411,135.896354 192.205739,124.989735 186.854729,113.72131 C191.961041,102.721277 196.164656,91.9540963 199.313837,81.7638014 C201.93261,82.5215915 204.474374,83.3208483 206.923636,84.1643056 C230.613348,92.3195488 245.063763,104.377206 245.063763,113.667995 C245.063763,123.564379 229.457753,136.411268 204.118035,144.807565 L204.118035,144.807565 Z M193.603754,165.642007 C196.165567,178.582766 196.531475,190.282717 194.834536,199.429057 C193.309843,207.64764 190.243595,213.12715 186.452366,215.321689 C178.384612,219.991462 161.131788,213.921395 142.525146,197.909832 C140.392124,196.074366 138.243609,194.114502 136.088259,192.040261 C143.301619,184.151133 150.510878,174.979732 157.54698,164.793993 C169.922699,163.695814 181.614905,161.900447 192.218042,159.449363 C192.740247,161.555956 193.204126,163.621993 193.603754,165.642007 L193.603754,165.642007 Z M87.2761866,214.514686 C79.3938934,217.298414 73.1160375,217.378157 69.3211631,215.189998 C61.2461189,210.532528 57.8891498,192.554265 62.4682434,168.438039 C62.9927272,165.676183 63.6170041,162.839142 64.3365173,159.939216 C74.8234575,162.258154 86.4299951,163.926841 98.8353334,164.932519 C105.918826,174.899534 113.336329,184.06091 120.811247,192.08264 C119.178102,193.65928 117.551336,195.16028 115.933685,196.574699 C106.001303,205.256705 96.0479605,211.41654 87.2761866,214.514686 L87.2761866,214.514686 Z M50.3486141,144.746959 C37.8658105,140.48046 27.5570398,134.935332 20.4908634,128.884403 C14.1414664,123.446815 10.9357817,118.048415 10.9357817,113.667995 C10.9357817,104.34622 24.8334611,92.4562517 48.0123604,84.3748281 C50.8247961,83.3942121 53.7689223,82.4701001 56.8242337,81.6020363 C60.0276398,92.0224477 64.229889,102.917218 69.3011135,113.93411 C64.1642716,125.11459 59.9023288,136.182975 56.6674809,146.725506 C54.489347,146.099407 52.3791089,145.440499 50.3486141,144.746959 L50.3486141,144.746959 Z M62.7270678,60.4878073 C57.9160346,35.9004118 61.1112387,17.3525532 69.1516515,12.6982729 C77.7160924,7.74005624 96.6544653,14.8094222 116.614922,32.5329619 C117.890816,33.6657739 119.171723,34.8514442 120.456275,36.0781256 C113.018267,44.0647686 105.66866,53.1573386 98.6480514,63.0655695 C86.6081646,64.1815215 75.0831931,65.9741531 64.4868907,68.3746571 C63.8206914,65.6948233 63.2305903,63.0619242 62.7270678,60.4878073 L62.7270678,60.4878073 Z M173.153901,87.7550367 C170.620796,83.3796304 168.020249,79.1076627 165.369124,74.9523483 C173.537126,75.9849113 181.362914,77.3555864 188.712066,79.0329319 C186.505679,86.1041206 183.755673,93.4974728 180.518546,101.076741 C178.196419,96.6680702 175.740322,92.2229454 173.153901,87.7550367 L173.153901,87.7550367 Z M128.122121,43.8938899 C133.166461,49.3588189 138.218091,55.4603279 143.186789,62.0803968 C138.179814,61.8439007 133.110868,61.720868 128.000001,61.720868 C122.937434,61.720868 117.905854,61.8411667 112.929865,62.0735617 C117.903575,55.515009 122.99895,49.4217021 128.122121,43.8938899 L128.122121,43.8938899 Z M82.8018984,87.830679 C80.2715265,92.2183886 77.8609975,96.6393627 75.5753239,101.068539 C72.3906004,93.5156998 69.6661103,86.0886276 67.440586,78.9171899 C74.7446255,77.2826781 82.5335049,75.9461789 90.6495601,74.9332099 C87.9610684,79.1268011 85.3391054,83.4302106 82.8018984,87.8297677 L82.8018984,87.830679 L82.8018984,87.830679 Z M90.8833221,153.182899 C82.4979621,152.247395 74.5919739,150.979704 67.289757,149.390303 C69.5508242,142.09082 72.3354636,134.505173 75.5876271,126.789657 C77.8792246,131.215644 80.2993228,135.638441 82.8451877,140.03572 L82.8456433,140.03572 C85.4388987,144.515476 88.1255676,148.90364 90.8833221,153.182899 L90.8833221,153.182899 Z M128.424691,184.213105 C123.24137,178.620587 118.071264,172.434323 113.021912,165.780078 C117.923624,165.972373 122.921029,166.0708 128.000001,166.0708 C133.217953,166.0708 138.376211,165.953235 143.45336,165.727219 C138.468257,172.501308 133.434855,178.697141 128.424691,184.213105 L128.424691,184.213105 Z M180.622896,126.396409 C184.044571,134.195313 186.929004,141.741317 189.219234,148.9164 C181.796719,150.609693 173.782736,151.973534 165.339049,152.986959 C167.996555,148.775595 170.619884,144.430263 173.197646,139.960532 C175.805484,135.438399 178.28163,130.90943 180.622896,126.396409 L180.622896,126.396409 Z M163.724586,134.496971 C159.722835,141.435557 155.614455,148.059271 151.443648,154.311611 C143.847063,154.854776 135.998946,155.134562 128.000001,155.134562 C120.033408,155.134562 112.284171,154.887129 104.822013,154.402745 C100.48306,148.068386 96.285368,141.425078 92.3091341,134.556664 L92.3100455,134.556664 C88.3442923,127.706935 84.6943232,120.799333 81.3870228,113.930466 C84.6934118,107.045648 88.3338117,100.130301 92.276781,93.292874 L92.2758697,93.294241 C96.2293193,86.4385872 100.390102,79.8276317 104.688954,73.5329157 C112.302398,72.9573964 120.109505,72.6571055 127.999545,72.6571055 L128.000001,72.6571055 C135.925583,72.6571055 143.742714,72.9596746 151.353879,73.5402067 C155.587114,79.7888993 159.719645,86.3784378 163.688588,93.2350031 C167.702644,100.168578 171.389978,107.037901 174.724618,113.77508 C171.400003,120.627999 167.720871,127.566587 163.724586,134.496971 L163.724586,134.496971 Z M186.284677,12.3729198 C194.857321,17.3165548 198.191049,37.2542268 192.804953,63.3986692 C192.461372,65.0669011 192.074504,66.7661189 191.654369,68.4881206 C181.03346,66.0374921 169.500286,64.2138746 157.425315,63.0810626 C150.391035,53.0639249 143.101577,43.9572289 135.784778,36.073113 C137.751934,34.1806885 139.716356,32.3762092 141.672575,30.673346 C160.572216,14.2257007 178.236518,7.73185406 186.284677,12.3729198 L186.284677,12.3729198 Z M128.000001,90.8080696 C140.624975,90.8080696 150.859926,101.042565 150.859926,113.667995 C150.859926,126.292969 140.624975,136.527922 128.000001,136.527922 C115.375026,136.527922 105.140075,126.292969 105.140075,113.667995 C105.140075,101.042565 115.375026,90.8080696 128.000001,90.8080696 L128.000001,90.8080696 Z"
    fill="#00D8FF"> </path> </g> </g></svg>
);
};
export const JSLogo = ({ className }: { className?: string }) => {
  return (
    <svg
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      fill="#000000"
      className={className}
    >
        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
        <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
        <g id="SVGRepo_iconCarrier">
          <g fill="none" fill-rule="evenodd">
            <rect width="24" height="24" fill="#F1DC50"></rect>
            <path
              stroke="#333"
              stroke-width="2"
              d="M12,11 C12,15.749205 12,18.4158717 12,19 C12,19.8761925 11.4771235,21 10,21 C7.61461794,21 7.5,19 7.5,19 M20.7899648,13.51604 C20.1898831,12.5053467 19.3944074,12 18.4035378,12 C16.8563489,12 16,13 16,14 C16,15 16.5,16 18.5084196,16.5 C19.7864643,16.8181718 21,17.5 21,19 C21,20.5 19.6845401,21 18.5,21 C16.9861609,21 15.9861609,20.3333333 15.5,19"></path>
          </g>
        </g>
    </svg>
  );
};
export const TSLogo = ({ className }: { className?: string }) => {
  return (
    <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_3307_794)">
      <path d="M20.4 0H3.6C1.61177 0 0 1.61177 0 3.6V20.4C0 22.3882 1.61177 24 3.6 24H20.4C22.3882 24 24 22.3882 24 20.4V3.6C24 1.61177 22.3882 0 20.4 0Z" fill="#3178C6"/>
      <path d="M10.9219 13.3126H13.9219V11.3908H5.53125V13.3126H8.53125V21.8908H10.9219V13.3126ZM14.8594 21.422C15.2391 21.6189 15.7031 21.7642 16.2187 21.8626C16.7344 21.9611 17.2969 22.0079 17.8594 22.0079C18.4219 22.0079 18.9375 21.9564 19.4531 21.8486C19.9687 21.7408 20.3906 21.5626 20.7656 21.3329C21.1453 21.0845 21.4687 20.7704 21.6562 20.3486C21.8437 19.9267 21.9891 19.4579 21.9891 18.8486C21.9891 18.422 21.9234 18.0517 21.7969 17.7236C21.6703 17.3954 21.4875 17.1142 21.2344 16.8798C20.9953 16.6314 20.7187 16.4111 20.3906 16.2236C20.0625 16.0361 19.6875 15.8392 19.2656 15.6611C18.9562 15.5345 18.7031 15.4126 18.4219 15.2908C18.1781 15.1689 17.9672 15.047 17.8125 14.9251C17.6391 14.7986 17.5078 14.6673 17.4141 14.5314C17.3203 14.3908 17.2734 14.2361 17.2734 14.0626C17.2734 13.9033 17.3152 13.7579 17.4 13.6267C17.4848 13.4954 17.6016 13.3876 17.7516 13.2939C17.9016 13.2001 18.0891 13.1298 18.3141 13.0783C18.5344 13.0267 18.7781 13.0033 19.0641 13.0033C19.2609 13.0033 19.4672 13.0178 19.6734 13.0473C19.8891 13.0768 20.1094 13.1223 20.3297 13.1833C20.55 13.2442 20.7656 13.3192 20.9859 13.4129C21.1922 13.5067 21.3844 13.6145 21.5484 13.7364V11.5333C21.1922 11.3973 20.7984 11.2942 20.3766 11.2286C19.9547 11.1629 19.4859 11.1301 18.9234 11.1301C18.3609 11.1301 17.8453 11.1911 17.3297 11.3083C16.8141 11.4254 16.3922 11.6129 16.0172 11.8708C15.6375 12.1239 15.3609 12.4333 15.1266 12.8551C14.9062 13.2489 14.7984 13.6989 14.7984 14.2614C14.7984 14.9645 15 15.5739 15.4078 16.0426C15.8109 16.5583 16.4391 16.9333 17.2359 17.3083C17.5594 17.4395 17.8453 17.5708 18.1266 17.6973C18.4078 17.8239 18.6422 17.9551 18.8297 18.0911C19.0312 18.227 19.1906 18.377 19.2984 18.5364C19.4156 18.6958 19.4766 18.8833 19.4766 19.0989C19.4766 19.2489 19.44 19.3895 19.3687 19.5208C19.2975 19.652 19.1859 19.7645 19.0359 19.8583C18.8859 19.952 18.7031 20.027 18.4734 20.0833C18.2531 20.1348 18.0047 20.1629 17.6766 20.1629C17.1609 20.1629 16.6453 20.0739 16.1766 19.8958C15.6609 19.7176 15.1922 19.4504 14.8594 19.172V21.422Z" fill="white"/>
      </g>
      <defs>
      <clipPath id="clip0_3307_794">
      <rect width="24" height="24" fill="white"/>
      </clipPath>
      </defs>
    </svg>
  )
};
export const NextLogo = ({ className }: { className?: string }) => {
  return (
    <svg className={className} width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g clip-path="url(#clip0_3307_1736)">
      <path d="M11.7433 0.280287C11.6905 0.285086 11.5225 0.30188 11.3713 0.313876C7.8848 0.628171 4.61902 2.50914 2.55061 5.40017C1.39883 7.00763 0.662164 8.83102 0.383817 10.7624C0.285435 11.4365 0.273438 11.6357 0.273438 12.5498C0.273438 13.4639 0.285435 13.663 0.383817 14.3372C1.05089 18.946 4.33107 22.8183 8.77984 24.2531C9.57649 24.5098 10.4163 24.6849 11.3713 24.7905C11.7433 24.8313 13.351 24.8313 13.7229 24.7905C15.3714 24.6081 16.7679 24.2003 18.1453 23.4973C18.3564 23.3893 18.3972 23.3606 18.3684 23.3366C18.3492 23.3222 17.4494 22.1154 16.3696 20.6567L14.4068 18.0055L11.9472 14.366C10.5939 12.365 9.4805 10.7288 9.47091 10.7288C9.46131 10.7264 9.45171 12.3434 9.44691 14.318C9.43971 17.7752 9.43731 17.9144 9.39412 17.9959C9.33173 18.1135 9.28374 18.1615 9.18296 18.2143C9.10618 18.2527 9.03899 18.2599 8.67666 18.2599H8.26153L8.15115 18.1903C8.07917 18.1447 8.02638 18.0847 7.99039 18.0151L7.93999 17.9072L7.94479 13.0968L7.95199 8.284L8.02638 8.19044C8.06477 8.14005 8.14636 8.07527 8.20394 8.04409C8.30233 7.9961 8.34072 7.9913 8.75584 7.9913C9.24535 7.9913 9.32693 8.0105 9.45411 8.14965C9.4901 8.18804 10.8219 10.1938 12.4152 12.6098C14.0085 15.0257 16.1872 18.3246 17.2574 19.9441L19.2011 22.8879L19.2995 22.8231C20.1705 22.2569 21.0919 21.4508 21.8214 20.6111C23.3739 18.8285 24.3745 16.6548 24.7104 14.3372C24.8088 13.663 24.8208 13.4639 24.8208 12.5498C24.8208 11.6357 24.8088 11.4365 24.7104 10.7624C24.0434 6.15352 20.7632 2.28122 16.3144 0.846498C15.5298 0.592183 14.6947 0.417042 13.7589 0.311477C13.5285 0.287485 11.9424 0.261094 11.7433 0.280287ZM16.7679 7.7034C16.8831 7.76098 16.9767 7.87134 17.0103 7.9865C17.0295 8.04888 17.0343 9.38284 17.0295 12.389L17.0223 16.7028L16.2616 15.5368L15.4986 14.3708V11.235C15.4986 9.2077 15.5082 8.06808 15.5226 8.0129C15.561 7.87854 15.6449 7.77298 15.7601 7.7106C15.8585 7.66021 15.8945 7.65542 16.2712 7.65542C16.6264 7.65542 16.6887 7.66021 16.7679 7.7034Z" fill="white"/>
      </g>
      <defs>
      <clipPath id="clip0_3307_1736">
      <rect width="24.5474" height="24.5474" fill="white" transform="translate(0.273438 0.273682)"/>
      </clipPath>
      </defs>
    </svg>
  )
};
export const TailLogo = ({ className }: { className?: string }) => {
  return (
  <svg className={className} width="27" height="16" viewBox="0 0 27 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M13.5164 0.251465C10.0939 0.251465 7.9553 1.97348 7.09928 5.41752C8.38281 3.6955 9.8801 3.04987 11.5911 3.48012C12.5674 3.72554 13.2655 4.43838 14.0375 5.2276C15.2959 6.51275 16.7524 8.00004 19.9331 8.00004C23.3552 8.00004 25.4942 6.27802 26.3498 2.83449C25.0667 4.55651 23.5694 5.20214 21.8584 4.77138C20.8817 4.52596 20.1836 3.81312 19.4115 3.02441C18.1532 1.73825 16.6971 0.251465 13.5164 0.251465ZM7.09928 8.00004C3.67719 8.00004 1.53814 9.72205 0.682617 13.1661C1.96615 11.4441 3.46344 10.7984 5.17398 11.2287C6.15071 11.4741 6.84881 12.187 7.62084 12.9762C8.87922 14.2613 10.3353 15.7486 13.5164 15.7486C16.9385 15.7486 19.0776 14.0271 19.9331 10.5831C18.6496 12.3051 17.1523 12.9507 15.4412 12.5205C14.465 12.2745 13.7669 11.5617 12.9949 10.773C11.7365 9.48783 10.2799 8.00004 7.09928 8.00004Z" fill="#38BDF8"/>
  </svg>
  )
};
